import * as React from "react";
import TutorialPageWrapper from '../../components/TutorialPageWrapper'

const Introduction = ({sectionName}) => (
  <div className="container">
  <h1>{sectionName}</h1>

<p>This is meant to serve more as a guide than as a references. The SCXML specification should be used as a reference. </p>

<p>Will sometimes refer to "Harel". This paper is the Rhapsody Semantics of Statecharts.</p>


<h2> Introduction </h2>

<h3>What is a state machine?</h3>

<p>A function that implements the reaction relation. The reaction relation accepts a tuple of <code>[snapshot, event]</code> and returns a new <code>snapshot</code>. Snapshot is a tuple of <code>[configuration, datamodel]</code>. A <code>configuration</code> is a set of basic states. A <code>datamodel</code> is a (depends on the SCXML profile).</p>

<p>Define finite set of states, and transitions between those states. Transitions are triggered by an event. An event has a name, and can have arbitrary data. Transitions can also have a condition, which is a JavaScript expression that must be satisfied for the transition to be triggered. </p>

<p>Different ways to define the reaction relation. Usually depends on the API exposed to a particular state machine library. </p>

<p>There are different **semantics** for state machines, which describe how the state machine will execute in response to an event. For a good comparison of different state machine semantics, see (Nancy Day). This tutorial will focus on SCXML semantics. </p>

<h3>What is SCXML?</h3>

<p>SCXML is an XML application that allows you to define state machines. Its specification defines a syntax (formalized by SCXML schema definition), and a semantics (defined in pseudocode, and formalized by a test suite).</p>

<p>In addition to the textual XML syntax, it is possible to visualize SCXML documents as a directed graph, using a graph visualzation library. The examples in this tutorial are provided as both textual and graphical. The graphical examples here are generated by the SCHVIZ library.</p>

<h3>What is SCION?</h3>

<p>SCION is a library that executes SCXML documents: SCION provides an API to parse SCXML into an executable "model", which implements the "reaction relation" described above. One can then create instances of that model, allowing one to create state machine instances and dispatch events to those instances. In the SCION API:</p>

<p>sc.gen(eventName, eventData) -> new configuration. </p>

<p>In this case, the state machine instance stores the datamodel and configuration as instance members.</p>

<p>SCION also exposes a pure functional API, which allows the datamodel and configuration to be passed as arguments.  In this case, create a new state machine, then...</p>

</div>
)

const WrappedIntroduction = ({location}) => (
  <TutorialPageWrapper Component={Introduction} pathname={location.pathname} />
);

export default WrappedIntroduction;
